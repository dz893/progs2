/* Язык C++, используемый компилятор Dev-C++ 5.11
Так как я не смог подобрать алгоритм, который всегда оптимально заполняет рюкзак,
было составленно три алгоритма: 
набор предметов с наибольшим соотношением стоимость/вес;
набор предметов с наименьшим весом;
набор предметов с наибольшей стоимостью.
В дальнейшем программа сравнивает результаты и выводит наиболее удачный вариант для каждого конкректного случая.
*/
#include <iostream>
#include <locale.h>

struct predmet {
	char nazvanie[20];
	float massa;
	float cena;
	float k;
};
int main () {
    setlocale(LC_ALL, "Rus");
	int N, i, i1=0, i2=0, i3=0, j;
	float M, c, c1=0, c2=0, c3=0;
	std::cout << "Введите количество предметов ";
	std::cin >> N;
	std::cout << "Введите максимально допустимый вес рюкзака ";		
	std::cin >> M;
	predmet a[N],b[N], b1[N], b2[N], b3[N], t;
	float M1=M;
	
	for (i=0; i<N; i++){				// заполнение данных о предметах
		std::cout << "введите название предмета № " << i+1 << " ";
		std::cin >> a[i].nazvanie;
		std::cout << "Введите вес предмета № " << i+1 << " ";
		std::cin >> a[i].massa;
		std::cout << "Введите стоимость предмета № " << i+1 << " ";
		std::cin >> a[i].cena;		
		a[i].k=a[i].cena/a[i].massa;
	}

	for(i=0; i<N-1; i++) {				// сортировка предметов в порядке убывания соотношения стоимость/вес
       for(j=0; j<N-i-1; j++) {  
           if(a[j].k<a[j+1].k) {           
              t=a[j];
              a[j]=a[j+1];
              a[j+1]=t; 
           }
        }
	}

	for (i=0; i<N; i++) {				// заполнение рюкзака по принципу: набирать предметы с самым высоким соотношением стоимость/вес
		if (a[i].massa<=M1){
			b1[i1]=a[i];
			M1=M1-a[i].massa;
			i1++;
			c1=c1+a[i].cena;
		}
	}		
	M1=M;
	
	for(i=0; i<N-1; i++) {				// сортировка предметов в порядке возрастания веса
       for(j=0; j<N-i-1; j++) {  
           if(a[j].massa>a[j+1].massa) {           
              t=a[j];
              a[j]=a[j+1];
              a[j+1]=t; 
           }
        }
	}	

	for (i=0; i<N; i++) {				// заполнение рюкзака по принципу: набирать предметы с самым низким весом
		if (a[i].massa<=M1){
			b2[i2]=a[i];
			M1=M1-a[i].massa;
			i2++;
			c2=c2+a[i].cena;
		}
	}
	M1=M;
	
	for(i=0; i<N-1; i++) {				// сортировка предметов в порядке убывания стоимости
       for(j=0; j<N-i-1; j++) {  
           if(a[j].cena<a[j+1].cena) {           
              t=a[j];
              a[j]=a[j+1];
              a[j+1]=t; 
           }
        }
	}	
	
	for (i=0; i<N; i++) {		   	// заполнение рюкзака по принципу: набирать предметы с самой высокой стоимостью
		if (a[i].massa<=M1){
			b3[i3]=a[i];
			M1=M1-a[i].massa;
			i3++;
			c3=c3+a[i].cena;
		}
	}
			
	if (c1>=c2 && c1>=c3) {			 // выбор наиболее удачного варианта заполнения рюкзака
		std::cout << "наиболее оптимальный способ заполнения рюкзака: набирать предметы с наибольшим соотношением стоимость/вес" << std::endl;
		c=c1;
		j=i1;			
		for (i=0; i<N; i++)				
			b[i]=b1[i];
	}
	
	else if (c2>=c1 && c2>=c3){
		std::cout << "наиболее оптимальный способ заполнения рюкзака: набирать предметы с наименьшим весом" << std::endl;
		c=c2;
		j=i2;
		for (i=0; i<N; i++)	
			b[i]=b2[i];	
	}
	
	else {
		std::cout << "наиболее оптимальный способ заполнения рюкзака: набирать предметы с наибольшей стоимостью" << std::endl;
		c=c3;
		j=i3;
		for (i=0; i<N; i++)	
			b[i]=b3[i];
	}
		
	std::cout << "общая стоимость предметов, которые необходимо положить в рюкзак - " << c << std::endl;			// вывод
	for (i=0; i<j; i++) {
		std::cout << "предмет № "<< i+1 << " - " << b[i].nazvanie << ": вес - " << b[i].massa << " цена - " << b[i].cena << " соотношение стоимость/вес - " << b[i].k << std::endl;
	}
	return 0;
}
